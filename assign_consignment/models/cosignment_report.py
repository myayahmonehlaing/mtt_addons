from odoo import models
from datetime import datetime
from collections import defaultdict


class ConsignmentReportXlsx(models.AbstractModel):
    _name = 'report.assign_consignment.consignment_report_data'
    _description = 'Consignment Report Data'
    _inherit = 'report.report_xlsx.abstract'

    def generate_xlsx_report(self, workbook, data, consignments):
        sheet = workbook.add_worksheet('Consignment Report')
        bold = workbook.add_format({'bold': True})
        header_format = workbook.add_format({'bold': True, 'bg_color': '#D3D3D3', 'align': 'center', 'border': 1})
        cell_format = workbook.add_format({'border': 1, 'align': 'center'})
        datetime_format = workbook.add_format({'num_format': 'yyyy-mm-dd hh:mm:ss'})
        date_format = workbook.add_format({'num_format': 'yyyy-mm-dd', 'align': 'left'})

        sheet.set_column(0, 0, 10)  # Serial number
        sheet.set_column(1, 1, 30)  # Product name
        sheet.set_column(2, 100, 20)  # Customers

        # Header
        sheet.write(0, 0, "Consignment Report", bold)
        sheet.write(1, 0, "Date To:", bold)
        if data.get('date_to'):
            sheet.write(1, 1, data['date_to'], date_format)

        domain = [('state', '!=', 'draft')]
        if data.get('date_to'):
            domain.append(('date', '<=', data['date_to']))

        consignments = self.env['assign.consignment'].search(domain)

        data_matrix = defaultdict(lambda: defaultdict(float))
        customers = set()
        products = set()

        for consignment in consignments:
            if not consignment.partner_id:
                continue
            customer_name = consignment.partner_id.name
            customers.add(customer_name)

            for line in consignment.order_line_ids:
                if line.product_id:
                    product_name = line.product_id.name
                    products.add(product_name)
                    initial_qty = line.quantity
                    sale_lines = self.env['sale.order.line'].search([
                        ('order_id.consignment_id', '=', consignment.id),
                        ('product_id', '=', line.product_id.id),
                        ('order_id.state', 'not in', ['cancel', 'draft']),
                        ('order_id.date_order', '<=', data.get('date_to'))
                    ])

                    sold_qty = sum(sale_lines.mapped('product_uom_qty'))
                    remaining_qty = max(initial_qty - sold_qty, 0)

                    data_matrix[product_name][customer_name] += remaining_qty

        sorted_customers = sorted(customers)
        sorted_products = sorted(products)

        # Table Header (start from row 3)
        table_start_row = 3
        sheet.write(table_start_row, 0, "S.No", header_format)
        sheet.write(table_start_row, 1, "Product", header_format)
        for col, customer in enumerate(sorted_customers, start=2):
            sheet.write(table_start_row, col, customer, header_format)

        # Data rows
        for row, product in enumerate(sorted_products, start=table_start_row + 1):
            sheet.write(row, 0, row - table_start_row, cell_format)
            sheet.write(row, 1, product, cell_format)
            for col, customer in enumerate(sorted_customers, start=2):
                qty = data_matrix[product].get(customer, 0.0)
                sheet.write(row, col, qty, cell_format)

        # Footer
        last_row = table_start_row + len(sorted_products) + 2
        sheet.write(last_row, 0, "Report Generated:", bold)
        sheet.write(last_row, 1, datetime.now(), datetime_format)
        sheet.write(last_row + 1, 0, "Generated by:", bold)
        sheet.write(last_row + 1, 1, self.env.user.name)
